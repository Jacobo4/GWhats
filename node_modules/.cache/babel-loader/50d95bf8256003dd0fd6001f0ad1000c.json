{"ast":null,"code":"import gapi from \"./lib/gapi\";\n\nconst config = require(\"../../gmail.config.json\");\n\nconst metaHeaders = [\"From\", \"Date\", \"Subject\"];\n\nclass GmailApi {\n  constructor() {\n    this.signIn = false;\n    this.listenCallback = null;\n\n    try {\n      this.initClient = this.initClient.bind(this);\n      this.handleError = this.handleError.bind(this);\n      this.getMessages = this.getMessages.bind(this);\n      this.updateSigninStatus = this.updateSigninStatus.bind(this);\n      this.normalizeData = this.normalizeData.bind(this);\n      this.listenSign = this.listenSign.bind(this);\n      gapi.load(\"client:auth2\", this.initClient);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  /**\n   * @param {string} userId\n   * @returns {Promise} Object: { emailAddress, messagesTotal, threadsTotal , historyId }\n   */\n\n\n  getProfile(userId = \"me\") {\n    if (this.signIn) {\n      return gapi.client.gmail.users.getProfile({\n        userId\n      });\n    } else {\n      return this.handleError();\n    }\n  }\n  /**\n   * @param {boolean} unread\n   * @param {integer} maxResults\n   * @param {string} userId\n   * @returns {Promise} Array: [ {id, threadId} ]\n   */\n\n\n  getMessageIds(unread = false, maxResults = 10, userId = \"me\") {\n    if (this.signIn) {\n      let q = \"\";\n\n      if (!!unread) {\n        q = \"is:unread\";\n      }\n\n      return gapi.client.gmail.users.messages.list({\n        userId,\n        maxResults,\n        q\n      });\n    } else {\n      return this.handleError();\n    }\n  }\n  /**\n   * Get messages by array of ids\n   * @param {[string] | string} id\n   * @param {string} userId\n   * @returns {Promise} [{id, labelId, snippet, internalDate, payload}] | {...}\n   */\n\n\n  getMessagesByIds(id, userId = \"me\") {\n    if (this.signIn) {\n      if (typeof id === \"string\") {\n        return gapi.client.gmail.users.messages.get({\n          userId,\n          id\n        });\n      } else {\n        return Promise.all(id.map(id => gapi.client.gmail.users.messages.get({\n          userId,\n          id\n        })));\n      }\n    } else {\n      return this.handleError();\n    }\n  }\n  /**\n   * @param {boolean} [unread=false]\n   * @param {number} [maxResults=10]\n   * @param {string} [userId=\"me\"]\n   * @returns {Promise} [{id, labelIds, snippet, internalDate, payload}] | {...}\n   */\n\n\n  getMessages(unread = false, maxResults = 10, userId = \"me\") {\n    if (this.signIn) {\n      let q = \"\";\n\n      if (!!unread) {\n        q = \"is:unread\";\n      }\n\n      return new Promise((resolve, reject) => {\n        gapi.client.gmail.users.messages.list({\n          userId,\n          maxResults,\n          q\n        }).then(resIds => {\n          if (typeof ids === \"string\") {\n            resolve(gapi.client.gmail.users.messages.get({\n              userId,\n              id: resIds.result.id\n            }));\n          } else {\n            let resData = [];\n\n            if (resIds.result.hasOwnProperty(\"messages\")) {\n              resData = Promise.all(resIds.result.messages.map(({\n                id\n              }) => gapi.client.gmail.users.messages.get({\n                userId,\n                id\n              })));\n            }\n\n            resolve(resData);\n          }\n        }).catch(e => {\n          reject(e);\n        });\n      });\n    } else {\n      return this.handleError();\n    }\n  }\n  /**\n   * Get list of snippets from the last threads\n   * @param {boolean} [unread=false]\n   * @param {number} [maxResults=10]\n   * @param {string} [userId=\"me\"]\n   * @returns {Promise} [{id, snippet, historyId}]\n   */\n\n\n  getThreadsList(unread = false, maxResults = 10, userId = \"me\") {\n    if (this.signIn) {\n      let q = \"\";\n\n      if (!!unread) {\n        q = \"is:unread\";\n      }\n\n      return gapi.client.gmail.users.threads.list({\n        userId,\n        maxResults,\n        q\n      });\n    } else {\n      return this.handleError();\n    }\n  }\n  /**\n   * @param {string | array} id\n   * @param {Promise} userId\n   */\n\n\n  getThreads(id, userId = \"me\") {\n    if (this.signIn) {\n      if (typeof id === \"string\") {\n        return gapi.client.gmail.users.threads.get({\n          userId,\n          id\n        });\n      } else {\n        return Promise.all(id.map(id => gapi.client.gmail.users.threads.get({\n          userId,\n          id\n        })));\n      }\n    } else {\n      return this.handleError();\n    }\n  }\n  /**\n   * Converting object to array of ids\n   * @param {object} data getMessageIds response\n   */\n\n\n  getArrayOfIds(data) {\n    if (data.hasOwnProperty(\"signIn\")) return;\n    const {\n      result: {\n        messages\n      }\n    } = data;\n    let result = [];\n    messages.forEach(message => {\n      result.push(message.id);\n    });\n    return result;\n  }\n  /**\n   * Get headers for preview\n   * @param {object} data getMessageIds headers response\n   */\n\n\n  getMetaFromHeaders(data) {\n    if (data.hasOwnProperty(\"signIn\")) return;\n    let result = {};\n    const {\n      headers\n    } = data.result.payload;\n    headers.forEach(header => {\n      if (metaHeaders.indexOf(header.name) > -1) {\n        result[header.name.toLowerCase()] = header.value;\n      }\n    });\n    return result;\n  }\n  /**\n   * Get body and decode\n   * @param {array | object} data getMessages response\n   * @returns {object} text, html\n   */\n\n\n  getBody(data) {\n    if (data.hasOwnProperty(\"signIn\")) return;\n    const {\n      result: {\n        payload\n      }\n    } = data;\n    let result = {\n      text: \"\",\n      html: \"\"\n    };\n\n    if (payload.hasOwnProperty(\"parts\")) {\n      payload.parts.forEach(part => {\n        if (part.mimeType === \"text/plain\") {\n          result.text = atob(part.body.data.replace(/-/g, \"+\").replace(/_/g, \"/\"));\n        }\n      });\n    } else {\n      if (!!payload.body.size) {\n        result.text = atob(payload.body.data.replace(/-/g, \"+\").replace(/_/g, \"/\"));\n      }\n    }\n\n    return result;\n  }\n  /**\n   *  Normalize data\n   * @param {array | object} data getMessages response\n   * @returns {array | object}\n   */\n\n\n  normalizeData(data) {\n    let result;\n\n    if (Array.isArray(data)) {\n      result = data.map(res => {\n        const {\n          id,\n          snippet\n        } = res.result;\n        return { ...this.getMetaFromHeaders(res),\n          id,\n          snippet,\n          body: this.getBody(res)\n        };\n      });\n    } else {\n      const {\n        id,\n        snippet\n      } = data.result;\n      result = { ...this.getMetaFromHeaders(data),\n        id,\n        snippet,\n        body: this.getBody(res)\n      };\n    }\n\n    return result;\n  } // Update SignIn property\n\n\n  updateSigninStatus(isSignedIn) {\n    this.signIn = isSignedIn;\n  }\n  /**\n   * Sign in google account\n   * @returns {Promise}\n   */\n\n\n  handleSignIn() {\n    try {\n      return gapi.auth2.getAuthInstance().signIn();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  /**\n   * Sign out google account\n   * @returns {Promise}\n   */\n\n\n  handleSignOut() {\n    try {\n      return gapi.auth2.getAuthInstance().signOut();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n  /**\n   * Error Handler\n   * @param {string} message\n   */\n\n\n  handleError(message = \"You are not authorized or api not initialized!\") {\n    return new Promise((_, reject) => {\n      reject({\n        message,\n        signIn: this.signIn\n      });\n      notification(message);\n    });\n  }\n  /**\n   * Method for update your sign if it was changed\n   * @param {*} callback function for updating sign status\n   */\n\n\n  listenSign(callback) {\n    if (gapi.auth2) {\n      gapi.auth2.getAuthInstance().isSignedIn.listen(callback);\n    } else {\n      this.listenCallback = callback;\n    }\n  } // Initialize the API client library\n\n\n  initClient() {\n    try {\n      gapi.client.init(config).then(() => {\n        this.listenSign(this.updateSigninStatus);\n        this.updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n\n        if (!!this.listenCallback) {\n          this.listenSign(this.listenCallback);\n          this.listenCallback(gapi.auth2.getAuthInstance().isSignedIn.get());\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n} // Notification for handleError\n\n\nconst notification = message => {\n  const id = \"gmail-api-notification-block\";\n  const textBlockId = \"gmail-api-notification-text-block\";\n  const styles = \"position: absolute; top: 10px; right: 10px; box-shadow:5px 5px 20px -10px #cecece; z-index: 99999999; padding: 20px; color: #7d7d7d; border-radius: 100px; font-size: 14px; transition: 0.3s;text-align: center\";\n  const notificationElement = document.getElementById(id);\n\n  if (!notificationElement) {\n    const notificationBlock = document.createElement(\"div\");\n    notificationBlock.style.cssText = styles;\n    notificationBlock.id = id;\n    const notificationText = document.createElement(\"p\");\n    notificationText.innerText = message;\n    notificationText.style.margin = \"5px 0\";\n    notificationText.id = textBlockId;\n    const signInButton = document.createElement(\"button\");\n    signInButton.innerText = \"Sign In\";\n    signInButton.style.cssText = \"color: #7d7d7d; background: #fff; border:1px solid #7d7d7d; border-radius: 5px; cursor: pointer; padding: 3px 20px;\";\n\n    signInButton.onclick = () => {\n      gapi.auth2.getAuthInstance().signIn();\n    };\n\n    document.body.appendChild(notificationBlock);\n    notificationBlock.appendChild(notificationText);\n    notificationBlock.appendChild(signInButton);\n    setTimeout(() => {\n      notificationBlock.style.display = \"none\";\n    }, 5000);\n  } else {\n    document.getElementById(textBlockId).innerText = message;\n    notificationElement.style.display = \"block\";\n    setTimeout(() => {\n      notificationElement.style.display = \"none\";\n    }, 5000);\n  }\n}; // Instance of GmailApi\n\n\nlet gmailApi;\n\ntry {\n  gmailApi = new GmailApi();\n} catch (e) {\n  console.log(e);\n}\n\nexport default gmailApi;","map":{"version":3,"sources":["/home/jacobo/Proyects/Me/GWhats/node_modules/react-gmail/index.js"],"names":["gapi","config","require","metaHeaders","GmailApi","constructor","signIn","listenCallback","initClient","bind","handleError","getMessages","updateSigninStatus","normalizeData","listenSign","load","e","console","log","getProfile","userId","client","gmail","users","getMessageIds","unread","maxResults","q","messages","list","getMessagesByIds","id","get","Promise","all","map","resolve","reject","then","resIds","ids","result","resData","hasOwnProperty","catch","getThreadsList","threads","getThreads","getArrayOfIds","data","forEach","message","push","getMetaFromHeaders","headers","payload","header","indexOf","name","toLowerCase","value","getBody","text","html","parts","part","mimeType","atob","body","replace","size","Array","isArray","res","snippet","isSignedIn","handleSignIn","auth2","getAuthInstance","handleSignOut","signOut","_","notification","callback","listen","init","textBlockId","styles","notificationElement","document","getElementById","notificationBlock","createElement","style","cssText","notificationText","innerText","margin","signInButton","onclick","appendChild","setTimeout","display","gmailApi"],"mappings":"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","sourcesContent":["import gapi from \"./lib/gapi\";\n\nconst config = require(\"../../gmail.config.json\");\nconst metaHeaders = [\"From\", \"Date\", \"Subject\"];\n\nclass GmailApi {\n  constructor() {\n    this.signIn = false;\n    this.listenCallback = null;\n    try {\n      this.initClient = this.initClient.bind(this);\n      this.handleError = this.handleError.bind(this);\n      this.getMessages = this.getMessages.bind(this);\n      this.updateSigninStatus = this.updateSigninStatus.bind(this);\n      this.normalizeData = this.normalizeData.bind(this);\n      this.listenSign = this.listenSign.bind(this);\n\n      gapi.load(\"client:auth2\", this.initClient);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  /**\n   * @param {string} userId\n   * @returns {Promise} Object: { emailAddress, messagesTotal, threadsTotal , historyId }\n   */\n  getProfile(userId = \"me\") {\n    if (this.signIn) {\n      return gapi.client.gmail.users.getProfile({ userId });\n    } else {\n      return this.handleError();\n    }\n  }\n\n  /**\n   * @param {boolean} unread\n   * @param {integer} maxResults\n   * @param {string} userId\n   * @returns {Promise} Array: [ {id, threadId} ]\n   */\n  getMessageIds(unread = false, maxResults = 10, userId = \"me\") {\n    if (this.signIn) {\n      let q = \"\";\n      if (!!unread) {\n        q = \"is:unread\";\n      }\n      return gapi.client.gmail.users.messages.list({ userId, maxResults, q });\n    } else {\n      return this.handleError();\n    }\n  }\n\n  /**\n   * Get messages by array of ids\n   * @param {[string] | string} id\n   * @param {string} userId\n   * @returns {Promise} [{id, labelId, snippet, internalDate, payload}] | {...}\n   */\n  getMessagesByIds(id, userId = \"me\") {\n    if (this.signIn) {\n      if (typeof id === \"string\") {\n        return gapi.client.gmail.users.messages.get({ userId, id });\n      } else {\n        return Promise.all(id.map(id => gapi.client.gmail.users.messages.get({ userId, id })));\n      }\n    } else {\n      return this.handleError();\n    }\n  }\n\n  /**\n   * @param {boolean} [unread=false]\n   * @param {number} [maxResults=10]\n   * @param {string} [userId=\"me\"]\n   * @returns {Promise} [{id, labelIds, snippet, internalDate, payload}] | {...}\n   */\n  getMessages(unread = false, maxResults = 10, userId = \"me\") {\n    if (this.signIn) {\n      let q = \"\";\n      if (!!unread) {\n        q = \"is:unread\";\n      }\n\n      return new Promise((resolve, reject) => {\n        gapi.client.gmail.users.messages\n          .list({ userId, maxResults, q })\n          .then(resIds => {\n            if (typeof ids === \"string\") {\n              resolve(gapi.client.gmail.users.messages.get({ userId, id: resIds.result.id }));\n            } else {\n              let resData = [];\n              if (resIds.result.hasOwnProperty(\"messages\")) {\n                resData = Promise.all(\n                  resIds.result.messages.map(({ id }) => gapi.client.gmail.users.messages.get({ userId, id }))\n                );\n              }\n              resolve(resData);\n            }\n          })\n          .catch(e => {\n            reject(e);\n          });\n      });\n    } else {\n      return this.handleError();\n    }\n  }\n\n  /**\n   * Get list of snippets from the last threads\n   * @param {boolean} [unread=false]\n   * @param {number} [maxResults=10]\n   * @param {string} [userId=\"me\"]\n   * @returns {Promise} [{id, snippet, historyId}]\n   */\n  getThreadsList(unread = false, maxResults = 10, userId = \"me\") {\n    if (this.signIn) {\n      let q = \"\";\n      if (!!unread) {\n        q = \"is:unread\";\n      }\n      return gapi.client.gmail.users.threads.list({ userId, maxResults, q });\n    } else {\n      return this.handleError();\n    }\n  }\n\n  /**\n   * @param {string | array} id\n   * @param {Promise} userId\n   */\n  getThreads(id, userId = \"me\") {\n    if (this.signIn) {\n      if (typeof id === \"string\") {\n        return gapi.client.gmail.users.threads.get({ userId, id });\n      } else {\n        return Promise.all(id.map(id => gapi.client.gmail.users.threads.get({ userId, id })));\n      }\n    } else {\n      return this.handleError();\n    }\n  }\n\n  /**\n   * Converting object to array of ids\n   * @param {object} data getMessageIds response\n   */\n  getArrayOfIds(data) {\n    if (data.hasOwnProperty(\"signIn\")) return;\n    const {\n      result: { messages }\n    } = data;\n    let result = [];\n    messages.forEach(message => {\n      result.push(message.id);\n    });\n    return result;\n  }\n\n  /**\n   * Get headers for preview\n   * @param {object} data getMessageIds headers response\n   */\n  getMetaFromHeaders(data) {\n    if (data.hasOwnProperty(\"signIn\")) return;\n    let result = {};\n    const { headers } = data.result.payload;\n    headers.forEach(header => {\n      if (metaHeaders.indexOf(header.name) > -1) {\n        result[header.name.toLowerCase()] = header.value;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Get body and decode\n   * @param {array | object} data getMessages response\n   * @returns {object} text, html\n   */\n  getBody(data) {\n    if (data.hasOwnProperty(\"signIn\")) return;\n    const {\n      result: { payload }\n    } = data;\n    let result = {\n      text: \"\",\n      html: \"\"\n    };\n\n    if (payload.hasOwnProperty(\"parts\")) {\n      payload.parts.forEach(part => {\n        if (part.mimeType === \"text/plain\") {\n          result.text = atob(part.body.data.replace(/-/g, \"+\").replace(/_/g, \"/\"));\n        }\n      });\n    } else {\n      if (!!payload.body.size) {\n        result.text = atob(payload.body.data.replace(/-/g, \"+\").replace(/_/g, \"/\"));\n      }\n    }\n    return result;\n  }\n\n  /**\n   *  Normalize data\n   * @param {array | object} data getMessages response\n   * @returns {array | object}\n   */\n  normalizeData(data) {\n    let result;\n\n    if (Array.isArray(data)) {\n      result = data.map(res => {\n        const { id, snippet } = res.result;\n        return {\n          ...this.getMetaFromHeaders(res),\n          id,\n          snippet,\n          body: this.getBody(res)\n        };\n      });\n    } else {\n      const { id, snippet } = data.result;\n      result = {\n        ...this.getMetaFromHeaders(data),\n        id,\n        snippet,\n        body: this.getBody(res)\n      };\n    }\n    return result;\n  }\n\n  // Update SignIn property\n  updateSigninStatus(isSignedIn) {\n    this.signIn = isSignedIn;\n  }\n\n  /**\n   * Sign in google account\n   * @returns {Promise}\n   */\n  handleSignIn() {\n    try {\n      return gapi.auth2.getAuthInstance().signIn();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  /**\n   * Sign out google account\n   * @returns {Promise}\n   */\n  handleSignOut() {\n    try {\n      return gapi.auth2.getAuthInstance().signOut();\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  /**\n   * Error Handler\n   * @param {string} message\n   */\n  handleError(message = \"You are not authorized or api not initialized!\") {\n    return new Promise((_, reject) => {\n      reject({\n        message,\n        signIn: this.signIn\n      });\n      notification(message);\n    });\n  }\n\n  /**\n   * Method for update your sign if it was changed\n   * @param {*} callback function for updating sign status\n   */\n  listenSign(callback) {\n    if (gapi.auth2) {\n      gapi.auth2.getAuthInstance().isSignedIn.listen(callback);\n    } else {\n      this.listenCallback = callback;\n    }\n  }\n\n  // Initialize the API client library\n  initClient() {\n    try {\n      gapi.client.init(config).then(() => {\n        this.listenSign(this.updateSigninStatus);\n        this.updateSigninStatus(gapi.auth2.getAuthInstance().isSignedIn.get());\n        if (!!this.listenCallback) {\n          this.listenSign(this.listenCallback);\n          this.listenCallback(gapi.auth2.getAuthInstance().isSignedIn.get());\n        }\n      });\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n\n// Notification for handleError\nconst notification = message => {\n  const id = \"gmail-api-notification-block\";\n  const textBlockId = \"gmail-api-notification-text-block\";\n  const styles =\n    \"position: absolute; top: 10px; right: 10px; box-shadow:5px 5px 20px -10px #cecece; z-index: 99999999; padding: 20px; color: #7d7d7d; border-radius: 100px; font-size: 14px; transition: 0.3s;text-align: center\";\n  const notificationElement = document.getElementById(id);\n\n  if (!notificationElement) {\n    const notificationBlock = document.createElement(\"div\");\n    notificationBlock.style.cssText = styles;\n    notificationBlock.id = id;\n\n    const notificationText = document.createElement(\"p\");\n    notificationText.innerText = message;\n    notificationText.style.margin = \"5px 0\";\n    notificationText.id = textBlockId;\n\n    const signInButton = document.createElement(\"button\");\n    signInButton.innerText = \"Sign In\";\n    signInButton.style.cssText =\n      \"color: #7d7d7d; background: #fff; border:1px solid #7d7d7d; border-radius: 5px; cursor: pointer; padding: 3px 20px;\";\n    signInButton.onclick = () => {\n      gapi.auth2.getAuthInstance().signIn();\n    };\n\n    document.body.appendChild(notificationBlock);\n    notificationBlock.appendChild(notificationText);\n    notificationBlock.appendChild(signInButton);\n    setTimeout(() => {\n      notificationBlock.style.display = \"none\";\n    }, 5000);\n  } else {\n    document.getElementById(textBlockId).innerText = message;\n    notificationElement.style.display = \"block\";\n    setTimeout(() => {\n      notificationElement.style.display = \"none\";\n    }, 5000);\n  }\n};\n\n// Instance of GmailApi\nlet gmailApi;\ntry {\n  gmailApi = new GmailApi();\n} catch (e) {\n  console.log(e);\n}\n\nexport default gmailApi;\n"]},"metadata":{},"sourceType":"module"}